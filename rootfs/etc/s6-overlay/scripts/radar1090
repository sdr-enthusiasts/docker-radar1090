#!/command/with-contenv bash
# shellcheck shell=bash disable=SC1091,SC2015,SC2164,SC2068,SC2145

source /scripts/common
s6wrap=(s6wrap --quiet --timestamps --prepend="$(basename "$0")")

#---------------------------------------------------------------------------------------------
# This repository, docker container, and accompanying scripts and documentation is
# Copyright (C) 2022-2023, Ramon F. Kolb (kx1t)
#
# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the
# Free Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with this program.
# If not, see <https://www.gnu.org/licenses/>.
#
# Radar1090 is an ADS-B RADAR Feed Service
# Copyright (C) 2023 by Michael J. Tubby B.Sc. MIET G8TIC mik@tubby.org All Rights Reserved.
# No license to the "radar" binary and its source code is implied; contact the author for information.
#---------------------------------------------------------------------------------------------

# Run radar1090 as a long term service

"${s6wrap[@]}" --args echo "Starting radar 1090 as a service..."

function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=("$ip")
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

if [[ -z "${RADAR1090_KEY}" ]]; then
	"${s6wrap[@]}" --args echo "FATAL: RADAR1090_KEY not set. Halting operation."
	exec sleep infinity
fi

IP_RESOLVE_HEALTHFILE=/run/watchdog-log/beastname_resolution_failures

# make sure the log files exists:
mkdir -p "$(dirname "$IP_RESOLVE_HEALTHFILE")"
echo "0" > "$IP_RESOLVE_HEALTHFILE"

beast_host="${BEASTHOST:-ultrafeeder}"
if ! valid_ip "$beast_host"; then
	beast_host="$(dig "${BEASTHOST:-ultrafeeder}" | awk '{if ($1 == "'"${BEASTHOST:-ultrafeeder}"'.") print $5}')"
    # If it fails, print error message and loop trying every 30 secs
	if ! valid_ip "$beast_host"; then
        while ! valid_ip "$beast_host"; do
            "${s6wrap[@]}" --args echo "WARNING: BEASTHOST (\"${BEASTHOST:-ultrafeeder}\") cannot be resolved. Make sure that \"${BEASTHOST:-ultrafeeder}\" is running or check your BEASTHOST parameter setting. Trying again in 30 seconds."
            read -r healthfailures < "$IP_RESOLVE_HEALTHFILE"
            (( healthfailures++ )) || true
            echo "$healthfailures" > "$IP_RESOLVE_HEALTHFILE"
            sleep 30
            beast_host="$(dig "$${BEASTHOST:-ultrafeeder}" | awk '{if ($1 == "'"${BEASTHOST:-ultrafeeder}"'.") print $5}')"
        done
    fi
    chk_enabled "$VERBOSE" && "${s6wrap[@]}" --args echo "BEASTHOST (\"${BEASTHOST:-ultrafeeder}\") successfully resolved to $beast_host" || true
fi

RADAR_BIN=(/usr/sbin/radar)

RADAR_CMD=("-b")
RADAR_CMD+=("-k ${RADAR1090_KEY}")
RADAR_CMD+=("-h ${RADARSERVER:-adsb-in.1090mhz.uk}")
RADAR_CMD+=("-p ${RADARPORT:-2227}")
RADAR_CMD+=("-l ${beast_host}")
chk_enabled "$VERBOSE" && RADAR_CMD+=("-s") || true

"${s6wrap[@]}" --args echo "invoking: ${RADAR_BIN[@]} ${RADAR_CMD[@]}"
"${s6wrap[@]}" --args ${RADAR_BIN[@]} ${RADAR_CMD[@]}
